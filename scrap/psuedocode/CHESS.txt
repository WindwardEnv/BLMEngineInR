
while (not converged) {
  CalcSpecies - calculate the species concentrations from component free ion concentrations and equilibrium constants
  Jacobian - interdependence of total concentrations and free concentrations of components (Z -= (dT(j,k) / dC(j,k)))
  CompUpdate = C(iter+1) = inv([Z]) %*% [C]
  CalcResidual - R(i) = sum(s(i)*a(i,j)) - T(j)
  ConvergenceCheck - abs(R(j)/T(j)) < tol
}


sub Jacobian {
  inputs: 
    SpecStoich
    SpecConc
    CtoM
  outputs:
    Z  
  variables:
    Sum
    j, k, S

  FOR j = 1 TO NComp
    FOR k = 1 TO NComp
       Sum# = 0
       FOR S = 1 TO NSpec
          Sum# = Sum# + SpecStoich(S, k) * SpecStoich(S, j) * SpecConc(S) * CtoM!(S)
       NEXT s
       IF SpecConc(k) <> 0 THEN
          Z(j, k) = Sum# / SpecConc(k)
       END IF
    NEXT k
  NEXT j 
}

sub CompUpdate {
  
}

sub CalcResidual () {
  inputs:
    SpecConc - species free concentrations
    SpecStoich - species stoichiometry
    TotConc - component total concentrations
  outputs
    Resid - vector(NComp) (maybe...useful for debugging)
    MaxError - double - maximum of absolute ratios of residuals to totals
  variables:
    double CalcTotConc
    double ThisError
  
  MaxError = 0
  for (iComp in 1:NComp) {
    CalcTotConc = 0
    for (iSpec in 1:NSpec){
      CalcTotConc =+ SpecConc(iSpec) * SpecStoich(iSpec, iComp) * CtoM(iSpec)
    }
    Resid(iComp) = TotConc(iComp) - CalcTotConc
    ThisError = abs(Resid(iComp) / TotConc(iComp))
    if (ThisError > MaxError){
      MaxError = ThisError
    }
  }
  
  return(MaxError)
}